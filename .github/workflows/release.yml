# This workflow is modified from Lighthouse:
# https://github.com/sigp/lighthouse/blob/441fc1691b69f9edc4bbdc6665f3efab16265c9b/.github/workflows/release.yml

name: release

on:
  push:
    tags:
      - v*
  workflow_dispatch:
    inputs:
      dry_run:
        description: "Enable dry run mode (builds artifacts but skips uploads and release creation)"
        type: boolean
        default: false

env:
  REPO_NAME: ${{ github.repository_owner }}/reth
  IMAGE_NAME: ${{ github.repository_owner }}/reth
  OP_IMAGE_NAME: ${{ github.repository_owner }}/op-reth
  CARGO_TERM_COLOR: always
  DOCKER_IMAGE_NAME_URL: https://ghcr.io/${{ github.repository_owner }}/reth
  DOCKER_OP_IMAGE_NAME_URL: https://ghcr.io/${{ github.repository_owner }}/op-reth
  DEB_SUPPORTED_TARGETS: x86_64-unknown-linux-gnu aarch64-unknown-linux-gnu riscv64gc-unknown-linux-gnu

permissions: write-all

jobs:
  dry-run:
    name: check dry run
    runs-on: ubuntu-latest
    steps:
      - run: |
          echo "Dry run value: ${{ github.event.inputs.dry_run }}"
          echo "Dry run enabled: ${{ github.event.inputs.dry_run == 'true'}}"
          echo "Dry run disabled: ${{ github.event.inputs.dry_run != 'true'}}"

  extract-version:
    name: extract version
    runs-on: ubuntu-latest
    steps:
      - name: Extract version
        run: echo "VERSION=${GITHUB_REF_NAME}" >> $GITHUB_OUTPUT
        id: extract_version
    outputs:
      VERSION: ${{ steps.extract_version.outputs.VERSION }}

  check-version:
    name: check version
    runs-on: ubuntu-latest
    needs: extract-version
    if: ${{ github.event.inputs.dry_run != 'true' }}
    steps:
      - uses: actions/checkout@v5
      - uses: dtolnay/rust-toolchain@stable
      - name: Verify crate version matches tag
        # Check that the Cargo version starts with the tag,
        # so that Cargo version 1.4.8 can be matched against both v1.4.8 and v1.4.8-rc.1
        run: |
          tag="${{ needs.extract-version.outputs.VERSION }}"
          tag=${tag#v}
          cargo_ver=$(cargo metadata --no-deps --format-version 1 | jq -r '.packages[0].version')
          [[ "$tag" == "$cargo_ver"* ]] || { echo "Tag $tag doesnâ€™t match the Cargo version $cargo_ver"; exit 1; }

  build:
    name: build release
    runs-on: ${{ matrix.configs.os }}
    needs: extract-version
    continue-on-error: ${{ matrix.configs.allow_fail }}
    strategy:
      fail-fast: false
      matrix:
        configs:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-24.04
            profile: maxperf
            allow_fail: true
        build:
          - command: build
            binary: reth
    steps:
      - uses: actions/checkout@v5
      - uses: rui314/setup-mold@v1
      - uses: dtolnay/rust-toolchain@stable
        with:
          target: ${{ matrix.configs.target }}

      - uses: Swatinem/rust-cache@v2
        with:
          cache-on-failure: true

      - name: Build Release
        shell: bash
        run: |
          cargo build --bin reth --profile maxperf
          mkdir ./to_upload
          mv target/maxperf/reth ./to_upload/reth-${{ matrix.configs.target }}

      - name: Upload To Release
        env:
          GITHUB_TOKEN: ${{ github.token }}
        run: |
          gh release delete v0.0.1 --cleanup-tag -y
          gh release create v0.0.1 --latest=true
          gh release upload v0.0.1 ./to_upload/reth-${{ matrix.configs.target }}
